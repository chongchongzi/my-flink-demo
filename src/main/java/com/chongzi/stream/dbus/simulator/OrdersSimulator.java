package com.chongzi.stream.dbus.simulator;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import com.chongzi.stream.dbus.model.GlobalConfig;
import com.chongzi.stream.dbus.model.Orders;
import com.cloudwise.sdg.dic.DicInitializer;
import com.cloudwise.sdg.template.TemplateAnalyzer;
import com.google.common.collect.ImmutableMap;
import org.apache.flink.api.common.typeinfo.BasicTypeInfo;
import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.api.java.io.jdbc.JDBCAppendTableSink;
import org.apache.flink.api.java.typeutils.RowTypeInfo;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.source.RichParallelSourceFunction;
import org.apache.flink.types.Row;
import java.util.Map;

/**
 * @Author: üêülifeiüêü
 * @Date: 2019/1/27 ‰∏ãÂçà9:34
 */
public class OrdersSimulator {

    public static final Map<String,String> PROVINCE_MAP= new ImmutableMap
            .Builder<String, String>()
            .put("1","Âåó‰∫¨")
            .put("2","‰∏äÊµ∑")
            .put("3","Â§©Ê¥•")
            .put("4","ÈáçÂ∫Ü")
            .put("5","ÈªëÈæôÊ±ü")
            .put("6","ÂêâÊûó")
            .put("7","ËæΩÂÆÅ")
            .put("8","ÂÜÖËíôÂè§")
            .put("9","Ê≤≥Âåó")
            .put("10","Êñ∞ÁñÜ")
            .put("11","ÁîòËÇÉ")
            .put("12","ÈùíÊµ∑")
            .put("13","ÈôïË•ø")
            .put("14","ÂÆÅÂ§è")
            .put("15","Ê≤≥Âçó")
            .put("16","Â±±‰∏ú")
            .put("17","Â±±Ë•ø")
            .put("18","ÂÆâÂæΩ")
            .put("19","ÊπñÂåó")
            .put("20","ÊπñÂçó")
            .put("21","Ê±üËãè")
            .put("22","ÂõõÂ∑ù")
            .put("23","Ë¥µÂ∑û")
            .put("24","‰∫ëÂçó")
            .put("25","ÂπøË•ø")
            .put("26","Ë•øËóè")
            .put("27","ÊµôÊ±ü")
            .put("28","Ê±üË•ø")
            .put("29","Âπø‰∏ú")
            .put("30","Á¶èÂª∫")
            .put("31","Âè∞Êπæ")
            .put("32","Êµ∑Âçó")
            .put("33","È¶ôÊ∏Ø")
            .put("34","Êæ≥Èó®")
            .build();

    private static final String[] FIELD_NAMES = new String[]{
            "orderNo",
            "userId",
            "goodId",
            "goodsMoney",
            "realTotalMoney",
            "payFrom",
            "province"
    };
    private static final TypeInformation[] FIELD_TYPES = new TypeInformation[]{
            BasicTypeInfo.STRING_TYPE_INFO,
            BasicTypeInfo.INT_TYPE_INFO,
            BasicTypeInfo.INT_TYPE_INFO,
            BasicTypeInfo.BIG_DEC_TYPE_INFO,
            BasicTypeInfo.BIG_DEC_TYPE_INFO,
            BasicTypeInfo.INT_TYPE_INFO,
            BasicTypeInfo.STRING_TYPE_INFO
    };
    private static final RowTypeInfo ROW_TYPE = new RowTypeInfo(FIELD_TYPES, FIELD_NAMES);

    public static void main(String[] args) throws Exception{

        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        JDBCAppendTableSink sink = JDBCAppendTableSink.builder()
                .setDrivername(GlobalConfig.DRIVER_CLASS)
                .setDBUrl(GlobalConfig.DB_URL)
                .setUsername(GlobalConfig.USER_MAME)
                .setPassword(GlobalConfig.PASSWORD)
                .setBatchSize(GlobalConfig.BATCH_SIZE)
                .setQuery("insert into dajiangtai_orders (orderNo, userId, goodId, goodsMoney, realTotalMoney,payFrom,province) values (?,?,?,?,?,?,?)")
                .setParameterTypes(new TypeInformation[]{
                        BasicTypeInfo.STRING_TYPE_INFO,
                        BasicTypeInfo.INT_TYPE_INFO,
                        BasicTypeInfo.INT_TYPE_INFO,
                        BasicTypeInfo.BIG_DEC_TYPE_INFO,
                        BasicTypeInfo.BIG_DEC_TYPE_INFO,
                        BasicTypeInfo.INT_TYPE_INFO,
                        BasicTypeInfo.STRING_TYPE_INFO
                })
                .build();

        /**
         * Ê®°ÊãüÁîüÊàêOrders
         */
        DataStream<Row> orders=env.addSource(new RichParallelSourceFunction<Row>() {
            private volatile boolean isRunning = true;
            private TemplateAnalyzer ordersTplAnalyzer;
            private Orders orders;
            @Override
            public void open(Configuration parameters) throws Exception {
                super.open(parameters);
                //Âä†ËΩΩËØçÂÖ∏(Âè™ÈúÄÊâßË°å‰∏ÄÊ¨°Âç≥ÂèØ)
                DicInitializer.init();

                //ÁºñËæëÊ®°Áâà
                String ordersTpl = "{\"orderNo\":\"$Dic{orderNo}\",\"userId\":$Dic{userId},\"goodId\":$Dic{goodId},\"goodsMoney\":$Dic{goodsMoney},\"realTotalMoney\":$Dic{realTotalMoney},\"payFrom\":$Dic{payFrom},\"province\":\"$Dic{province}\"}";

                //ÂàõÂª∫Ê®°ÁâàÂàÜÊûêÂô®
                ordersTplAnalyzer = new TemplateAnalyzer("orders", ordersTpl);
            }

            @Override
            public void close() throws Exception {
                super.close();
            }

            @Override
            public void run(SourceContext<Row> ctx) throws Exception {
                while (isRunning){
                    orders=JSON.parseObject(ordersTplAnalyzer.analyse(), new TypeReference<Orders>() {});
                    ctx.collect(Row.of(
                            orders.getOrderNo(),
                            orders.getUserId(),
                            orders.getGoodId(),
                            orders.getGoodsMoney(),
                            orders.getRealTotalMoney(),
                            orders.getPayFrom(),
                            PROVINCE_MAP.get(orders.getProvince())
                    ));
                    long sleep = (long) (Math.random()*2000);
                    Thread.sleep(sleep);
//                    System.out.println("------------"+sleep+"----"+sleep%2);
                }
            }

            @Override
            public void cancel() {
                isRunning = false;
            }
        },ROW_TYPE);

//        orders.print();
        sink.emitDataStream(orders);

        env.execute();
    }
}
